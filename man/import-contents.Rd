% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/exported.R
\name{import-contents}
\alias{import-contents}
\alias{import_datavyu}
\alias{import_content_as_list}
\title{Imports Datavyu content into R}
\usage{
import_datavyu(..., as_list = FALSE, append_colnames = FALSE)

import_content_as_list(
  folder = getOption("datavyur.folder"),
  columns = NULL,
  files = NULL,
  class_overwrite = getOption("datavyur.classlist"),
  traverse = FALSE
)
}
\arguments{
\item{...}{additional arguments passed to \code{\link[=import_content_as_list]{import_content_as_list()}}.}

\item{as_list}{a logical value indicating to return a list or data frame (default).}

\item{append_colnames}{If \code{TRUE}, the column names for the returned data will be in
\code{column.field} format, e.g., \code{childhands.ordinal}, instead of having the Datavyu
column name in its own variable in the returned data set.}

\item{folder}{a character string corresponding to the folder path to be scanned.
Defaults to R option \code{datavyur.folder}, which is the example data folder that is
used internally. This can also be a character vector of file paths to import
instead of all the contents from a folder. Must be either a single folder or vector
of file paths.}

\item{columns}{similar to the \code{files} argument. The name of the datavyu "column" to
import, as used in the original datavyu \code{.opf} file.}

\item{files}{the name of the datavyu "file" to import, as used in the original
datavyu \code{.opf} file. For example, a datavyu file \code{dyad1.opf} will have \code{dyad1} in
the \code{.csv} column "file", and if \code{files="dyad1"} is specified, only data from
\code{dyad1.opf} will be imported.}

\item{class_overwrite}{a \code{list} of new classes to override the guessed classes when
reading in .csv data. See \code{colClasses} from \code{\link[data.table:fread]{data.table::fread()}}. Sometimes
\code{fread} doesn't get the right class of the imported column argument. This can
happen if you have codes in your data of several possible types. Use}

\item{traverse}{search subfolders of \code{folder} for datavyu \code{.csv} files.
\code{class_overwrite} to override improper type settings.}
}
\value{
See sections \code{import_datavyu} and \code{import_content_as_list} below.
}
\description{
The function will read all exported \code{.opf} data in the form of several
\code{"/column__file.csv"} files. Files will be searched based on the directory supplied
to \code{folder}. Files are valid if they have the following columns: \code{file}, \code{column},
\code{onset}, \code{offset}, \code{ordinal}.
}
\details{
Most functions in this package only work if you had previously used the
\code{datavyu2csv.rb} script to export a Datavyu file to .csv. This can be obtained from
\code{\link[=ruby_script_folder]{ruby_script_folder()}}.
}
\section{Functions}{
\itemize{
\item \code{import_datavyu}: Import content as a \code{data.frame} or \code{list} of \code{data.frame} objects.

\item \code{import_content_as_list}: Import content as a nested list.
}}

\section{Note}{
 If the same column name was used but has a different number of datavyu
codes then you will get an error unless \code{as_list=TRUE}. This function assumes that
the .csv is structured in a way based on how the \code{datavyu2csv.rb} script exports
data.
}

\section{\code{import_datavyu}}{
 Returns one of the objects below.
\itemize{
\item a single \code{data.frame} if a single column was found or specified with
\code{columns="..."}.
\item a \link{list} of datasets where each list entry is a datavyu column if different
columns are found or if \code{as_list=FALSE}.
}
}

\section{\code{import_content_as_list}}{
 Returns a \link{list} with the names:
\itemize{
\item \code{data}: a nested list with files at the top layer and column data within files.
\item \code{contents}: a \code{data.table} with the same contents from \code{\link[=datayu_col_search]{datayu_col_search()}}.
\item \code{order}: The order of files and columns nested within \verb{$data}.
}
}

\examples{
import_datavyu(columns="childhands")
import_datavyu(columns="childhands", append_colnames=TRUE)
import_datavyu(columns=c("childhands", "parenthands"), as_list=TRUE)

example_data_info <- datavyu_col_search(folder=datavyur_data_folder())
import_datavyu(files=example_data_info$file[1])

data_list <- import_content_as_list()
str(data_list)
}
